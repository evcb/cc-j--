/* Generated By:JavaCC: Do not edit this line. JavaCCParserTokenManager.java */
package jminusminus;
import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleEntry;

public class JavaCCParserTokenManager implements JavaCCParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8010L) != 0L)
            return 19;
         if ((active0 & 0xffffffffffff00L) != 0L)
         {
            jjmatchedKind = 102;
            return 1;
         }
         if ((active1 & 0x1000000000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0xffff7effff7f00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x8100008000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x400c00000c0000L) != 0L)
            return 1;
         if ((active0 & 0xbff37ffff37f00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x300c70101400L) != 0L)
            return 1;
         if ((active0 & 0xbfc7738fe36b00L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x18023288004800L) != 0L)
            return 1;
         if ((active0 & 0xa7c54107e32300L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 4;
            }
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x12400107010000L) != 0L)
            return 1;
         if ((active0 & 0xa5854000e22300L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x10000602200L) != 0L)
            return 1;
         if ((active0 & 0xa5844000820100L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x24840000820000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x81004000000100L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x4800000020000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x20040000800000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x800000020000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 37:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 38:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x8000000L);
      case 40:
         return jjStopAtPos(0, 92);
      case 41:
         return jjStopAtPos(0, 93);
      case 42:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 43:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x4L);
      case 44:
         return jjStopAtPos(0, 99);
      case 45:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x10000L);
      case 46:
         return jjStartNfaWithStates_0(0, 100, 17);
      case 47:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 58:
         return jjStopAtPos(0, 101);
      case 59:
         return jjStopAtPos(0, 98);
      case 60:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x100040L);
      case 61:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x680480L);
      case 63:
         return jjStopAtPos(0, 77);
      case 91:
         return jjStopAtPos(0, 96);
      case 93:
         return jjStopAtPos(0, 97);
      case 94:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x600000200L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7800000c00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8100000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xb0000004000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x840000078000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000180000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e00000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x700000c000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x78000030000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000040000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 94);
      case 124:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000L);
      case 125:
         return jjStopAtPos(0, 95);
      case 126:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 43:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 45:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 60:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 61:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 62:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x280400L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x401800204000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000090000400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000001800L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000010000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000060000L, active1, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80386140000200L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000220c00000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000004000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x9100000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000400000000L, active1, 0L);
      case 124:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(2, 84);
         break;
      case 62:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000004000c00L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000d0400000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000104000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4116000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000800200L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800008010000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x19000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800021100L, active1, 0L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x641402002000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000L, active1, 0L);
      case 119:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 1);
         break;
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(3, 85);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80030200000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4001000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 1);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x40008002000L, active1, 0L);
      case 103:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1400000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x800081000200L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000010000L, active1, 0L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 1);
         break;
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004800L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2004004820100L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x620000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 1);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000800200L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4005000000L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10100000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x40002010100L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 119:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x300L);
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 1);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 1);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 104:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000020000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 1);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000400000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20100L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x20800000000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x820000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x24800000000000L);
      case 112:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 1);
         break;
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 1);
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 17, 1);
         break;
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 1);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(25, 27);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 46)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(17);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 39)
                     jjAddStates(8, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 102)
                        kind = 102;
                     jjCheckNAdd(1);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 48 && kind > 106)
                     kind = 106;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 39)
                     jjAddStates(8, 9);
                  break;
               case 7:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar == 39 && kind > 107)
                     kind = 107;
                  break;
               case 9:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 13:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 14:
                  if (curChar == 34 && kind > 108)
                     kind = 108;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar != 46)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 22:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 23:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(25, 27);
                  break;
               case 25:
                  jjCheckNAddTwoStates(25, 27);
                  break;
               case 26:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 27:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 20:
                  jjAddStates(0, 2);
                  break;
               case 25:
                  jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   20, 21, 23, 19, 24, 11, 13, 14, 6, 9, 25, 27, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\143\150\141\162", "\143\154\141\163\163", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", "\151\146", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\164\141\164\151\143", "\163\165\160\145\162", "\164\150\151\163", "\164\162\165\145", 
"\166\157\151\144", "\167\150\151\154\145", "\144\157\165\142\154\145", "\142\162\145\141\153", 
"\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\157", "\146\151\156\141\154\154\171", "\146\154\157\141\164", 
"\151\156\164\145\162\146\141\143\145", "\146\157\162", "\154\157\156\147", "\147\157\164\157", 
"\156\141\164\151\166\145", "\151\155\160\154\145\155\145\156\164\163", 
"\163\164\162\151\143\164\146\160", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\171", "\166\157\154\141\164\151\154\145", "\53", "\75", "\55\55", 
"\75\75", "\76", "\53\53", "\46\46", "\74\75", "\41", "\55", "\53\75", "\52", "\57", 
"\45", "\74\74", "\76\76", "\176", "\174", "\76\76\76", "\46", "\136", "\77", 
"\41\75", "\57\75", "\55\75", "\52\75", "\45\75", "\76\76\75", "\74\74\75", 
"\76\76\76\75", "\76\75", "\74", "\136\75", "\174\75", "\174\174", "\46\75", "\50", "\51", 
"\173", "\175", "\133", "\135", "\73", "\54", "\56", "\72", null, null, null, null, 
null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xdc7fffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[28];
private final int[] jjstateSet = new int[56];
protected char curChar;
public JavaCCParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JavaCCParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 111)
   {
      jjmatchedKind = 111;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
