/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package jminusminus;

import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleEntry;

/**
 * Parser generated by JavaCC. It parses a j-- compilation unit
 * (program file), taking tokens from the scanner (also generated by
 * JavaCC), and produces an abstract syntax tree (AST) for it.
 */

class JavaCCParser implements JavaCCParserConstants {
    /** Whether a parser error has been found. */
    private boolean errorHasOccurred;

    /** Name of the file that is parsed. */
    private String fileName;

    /**
     * Pull out the ambiguous part of a name and return it.
     *
     * @param name with an ambiguos part (possibly).
     *
     * @return ambiguous part or null.
     */

    private AmbiguousName ambiguousPart(TypeName name) {
        String qualifiedName = name.toString();
        int lastDotIndex = qualifiedName.lastIndexOf('.');
        return lastDotIndex == -1
            ? null // It was a simple name
            : new AmbiguousName(name.line(),
                                qualifiedName.substring(0, lastDotIndex));
    }

    /**
     * Report a syntax error.
     *
     * @param message message identifying the error.
     * @param args    related values.
     */

    private void reportParserError(String message, Object... args) {
        errorHasOccurred = true;
        System.err.printf("%s:%d: ", fileName, token.beginLine);
        System.err.printf(message, args);
        System.err.println();
    }

    /**
     * Recover from the parser error that occurred by skipping to
     * any of the specified tokens.
     *
     * Current error recovery mechanism is rather simple-minded and is
     * based on skipping all the tokens until a SEMI or an EOF is
     * encountered. This scheme can be enhanced by passing in the
     * FOLLOW-SET of the non-terminal at hand.
     *
     * @param skipTo array of tokens that we could skip to.
     * @param e      exception that is raised by JavaCC in the event
     *               of a parser error.
     */

    private void recoverFromError(int[] skipTo, ParseException e) {
        // Get the possible expected tokens
        StringBuffer expected = new StringBuffer();
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                expected.append("\n");
                expected.append("    ");
                expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                expected.append("...");
            }
        }

        // Print error message
        if (e.expectedTokenSequences.length == 1) {
            reportParserError("\"%s\" found where %s sought",
                              getToken(1), expected);
        } else {
            reportParserError("\"%s\" found where one of %s sought",
                              getToken(1), expected);
        }

        // Recover
        boolean loop = true;
        do {
            token = getNextToken();
            for (int i = 0; i < skipTo.length; i++) {
                if (token.kind == skipTo[i]) {
                    loop = false;
                    break;
                }
            }
        } while(loop);
    }

    /**
     * Sets the name of the file that is being parsed.
     *
     * @param fileName name of the file.
     */

    public void fileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Has a parser error occurred up to now?
     *
     * @return true or false.
     */

    public boolean errorHasOccurred() {
        return errorHasOccurred;
    }

  final public JCompilationUnit compilationUnit() throws ParseException {
    int line = 0;
    TypeName packageName = null; // Default
    TypeName anImport = null;
    ArrayList<TypeName> imports = new ArrayList<TypeName>();
    JAST aTypeDeclaration = null;
    ArrayList<JAST> typeDeclarations = new ArrayList<JAST>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
                        line = token.beginLine;
        packageName = qualifiedIdentifier();
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(IMPORT);
                       line = line == 0 ? token.beginLine : line;
        anImport = qualifiedIdentifier();
              imports.add(anImport);
        jj_consume_token(SEMI);
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case INTERFACE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        aTypeDeclaration = typeDeclaration();
                line = line == 0 ? aTypeDeclaration.line() : line;
                typeDeclarations.add(aTypeDeclaration);
      }
      jj_consume_token(0);
                line = line == 0 ? token.beginLine : line;
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
        {if (true) return new JCompilationUnit(fileName, line, packageName,
                                    imports, typeDeclarations);}
    throw new Error("Missing return statement in function");
  }

  final private TypeName qualifiedIdentifier() throws ParseException {
    int line = 0;
    String qualifiedIdentifier = "";
    try {
      jj_consume_token(IDENTIFIER);
            line = token.beginLine;
            qualifiedIdentifier = token.image;
      label_3:
      while (true) {
        if (jj_2_1(2147483647)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
              qualifiedIdentifier += "." + token.image;
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new TypeName(line, qualifiedIdentifier);}
    throw new Error("Missing return statement in function");
  }

  final private JAST typeDeclaration() throws ParseException {
    ArrayList<String> mods = null;
    JAST classOrInterfaceDeclaration = null;
    try {
      mods = modifiers();
      if (jj_2_2(2147483647)) {
        classOrInterfaceDeclaration = classDeclaration(mods);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTERFACE:
          classOrInterfaceDeclaration = interfaceDeclaration(mods);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return classOrInterfaceDeclaration;}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<String> modifiers() throws ParseException {
    ArrayList<String> mods = new ArrayList<String>();
    boolean scannedPUBLIC    = false;
    boolean scannedPROTECTED = false;
    boolean scannedPRIVATE   = false;
    boolean scannedSTATIC    = false;
    boolean scannedABSTRACT  = false;
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                mods.add("public");
                if (scannedPUBLIC) {
                    reportParserError("Repeated modifier: public");
                }
                if (scannedPROTECTED || scannedPRIVATE) {
                    reportParserError("Access conflict in modifiers");
                }
                scannedPUBLIC = true;
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                mods.add("protected");
                if (scannedPROTECTED) {
                    reportParserError("Repeated modifier: protected");
                }
                if (scannedPUBLIC || scannedPRIVATE) {
                    reportParserError("Access conflict in modifiers");
                }
                scannedPROTECTED = true;
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                mods.add("private");
                if (scannedPRIVATE) {
                    reportParserError("Repeated modifier: private");
                }
                if (scannedPUBLIC || scannedPROTECTED) {
                    reportParserError("Access conflict in modifiers");
                }
                scannedPRIVATE = true;
          break;
        case STATIC:
          jj_consume_token(STATIC);
                mods.add("static");
                if (scannedSTATIC) {
                    reportParserError("Repeated modifier: static");
                }
                scannedSTATIC = true;
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                mods.add("abstract");
                if (scannedABSTRACT) {
                    reportParserError("Repeated modifier: abstract");
                }
                scannedABSTRACT = true;
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return mods;}
    throw new Error("Missing return statement in function");
  }

  final private JClassDeclaration classDeclaration(ArrayList<String> mods) throws ParseException {
    int line = 0;
    String name = "";
    Type superClass = Type.OBJECT;
    ArrayList<JMember> classBody = null;
    ArrayList<TypeName> interfacesImplemented = new ArrayList<TypeName>();
    try {
      jj_consume_token(CLASS);
                  line = token.beginLine;
      jj_consume_token(IDENTIFIER);
                       name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        superClass = qualifiedIdentifier();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
             interfacesImplemented.add(qualifiedIdentifier());
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
                 interfacesImplemented.add(qualifiedIdentifier());
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      classBody = classBody();
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
        {if (true) return new JClassDeclaration(line, mods, name, superClass, interfacesImplemented, classBody);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<JMember> classBody() throws ParseException {
    ArrayList<String> mods = null;
    JMember aMember        = null;
    ArrayList<JMember> members = new ArrayList<JMember>();
    try {
      jj_consume_token(LCURLY);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case CHAR:
        case INT:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case VOID:
        case DOUBLE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        mods = modifiers();
        aMember = memberDecl(mods);
                                         members.add(aMember);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return members;}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<Type> throwsClause() throws ParseException {
    ArrayList<Type> throwsTypes = new ArrayList();
    Type aType = null;
    try {
      jj_consume_token(THROWS);
      aType = type();
          throwsTypes.add(aType);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        aType = type();
              throwsTypes.add(aType);
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return throwsTypes;}
    throw new Error("Missing return statement in function");
  }

  final private JMember memberDecl(ArrayList<String> mods) throws ParseException {
    int line = 0;
    Type type = null;
    String name = "";
    ArrayList<JFormalParameter> params = null;
    JBlock body = null;
    ArrayList<JVariableDeclarator> variableDeclarators = null;
    JMember memberDecl = null;
    ArrayList<Type> exceptionTypes = new ArrayList<Type>();
    try {
      if (jj_2_3(2147483647)) {
        jj_consume_token(IDENTIFIER);
                line = token.beginLine;
                name = token.image;
        params = formalParameters();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          exceptionTypes = throwsClause();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        body = block();
                memberDecl = new JConstructorDeclaration(line, mods,
                                                         name, params, exceptionTypes, body);
      } else if (jj_2_4(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
          jj_consume_token(VOID);
                         type = Type.VOID;
          break;
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
        case IDENTIFIER:
          type = type();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              line = token.beginLine;
        jj_consume_token(IDENTIFIER);
                           name = token.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          exceptionTypes = throwsClause();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        params = formalParameters();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
          body = block();
          break;
        case SEMI:
          jj_consume_token(SEMI);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                memberDecl = new JMethodDeclaration(line, mods, name,
                                                    type, params, exceptionTypes, body);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
        case IDENTIFIER:
          type = type();
                            line = token.beginLine;
          variableDeclarators = variableDeclarators(type);
          jj_consume_token(SEMI);
                memberDecl = new JFieldDeclaration(line, mods,
                                                   variableDeclarators);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return memberDecl;}
    throw new Error("Missing return statement in function");
  }

  final private JInterfaceDeclaration interfaceDeclaration(ArrayList<String> mods) throws ParseException {
    int line = 0;
    String name = "";
    TypeName interfaceExtended = null;
    ArrayList<JMember> interfaceBody = null;
    ArrayList<TypeName> interfacesExtended = new ArrayList<TypeName>();
    try {
      jj_consume_token(INTERFACE);
                      line = token.beginLine;
      jj_consume_token(IDENTIFIER);
                       name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
             interfacesExtended.add(qualifiedIdentifier());
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
                 interfacesExtended.add(qualifiedIdentifier());
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      interfaceBody = interfaceBody();
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
        {if (true) return new JInterfaceDeclaration(line, mods, name, interfacesExtended, interfaceBody);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<JMember> interfaceBody() throws ParseException {
    ArrayList<String> mods = null;
    JMember aMember        = null;
    ArrayList<JMember> members = new ArrayList<JMember>();
    try {
      jj_consume_token(LCURLY);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case CHAR:
        case CLASS:
        case INT:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case VOID:
        case DOUBLE:
        case INTERFACE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        mods = modifiers();
        aMember = interfaceMemberDecl(mods);
                                                  members.add(aMember);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return members;}
    throw new Error("Missing return statement in function");
  }

  final private JMember interfaceMemberDecl(ArrayList<String> mods) throws ParseException {
    int line = 0;
    Type type = null;
    String name = "";
    ArrayList<JFormalParameter> params = null;
    JBlock body = null;
    ArrayList<JVariableDeclarator> variableDeclarators = null;
    JMember memberDecl = null;
    ArrayList<Type> exceptionTypes = new ArrayList<Type>();
    JClassDeclaration classDecl= null;
    JInterfaceDeclaration interfaceDecl = null;
    try {
      if (jj_2_5(2147483647)) {
        classDecl = classDeclaration(mods);
              memberDecl = (JMember) classDecl;
      } else if (jj_2_6(2147483647)) {
        interfaceDecl = interfaceDeclaration(mods);
             memberDecl = (JMember) interfaceDecl;
      } else if (jj_2_7(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
          jj_consume_token(VOID);
                         type = Type.VOID;
          break;
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
        case IDENTIFIER:
          type = type();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              line = token.beginLine;
        jj_consume_token(IDENTIFIER);
                           name = token.image;
        params = formalParameters();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
          body = block();
          break;
        case SEMI:
          jj_consume_token(SEMI);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                memberDecl = new JMethodDeclaration(line, mods, name,
                                                    type, params, exceptionTypes, body);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
        case IDENTIFIER:
          type = type();
                            line = token.beginLine;
          variableDeclarators = variableDeclarators(type);
          jj_consume_token(SEMI);
                memberDecl = new JFieldDeclaration(line, mods,
                                                   variableDeclarators);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return memberDecl;}
    throw new Error("Missing return statement in function");
  }

  final private JBlock block() throws ParseException {
    int line = 0;
    JStatement aStatement = null;
    ArrayList<JStatement> statements = new ArrayList<JStatement>();
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case FALSE:
        case IF:
        case INT:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case THIS:
        case WHILE:
        case DOUBLE:
        case THROW:
        case TRY:
        case INC:
        case LNOT:
        case MINUS:
        case LPAREN:
        case LCURLY:
        case SEMI:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case DOUBLE_LITERAL:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        aStatement = blockStatement();
              statements.add(aStatement);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JBlock(line, statements);}
    throw new Error("Missing return statement in function");
  }

  final private JStatement blockStatement() throws ParseException {
    JStatement statement = null;
    try {
      if (jj_2_8(2147483647)) {
        statement = localVariableDeclarationStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case IF:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case THIS:
        case WHILE:
        case THROW:
        case TRY:
        case INC:
        case LNOT:
        case MINUS:
        case LPAREN:
        case LCURLY:
        case SEMI:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case DOUBLE_LITERAL:
          statement = statement();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final private JStatement statement() throws ParseException {
    int line = 0;
    JStatement statement  = null;
    JExpression test      = null;
    JStatement consequent = null;
    JStatement alternate  = null;
    JStatement body       = null;
    JExpression expr      = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        statement = block();
        break;
      case IF:
        jj_consume_token(IF);
               line = token.beginLine;
        test = parExpression();
        consequent = statement();
        if (jj_2_9(2147483647)) {
          jj_consume_token(ELSE);
          alternate = statement();
        } else {
          ;
        }
          statement = new JIfStatement(line, test, consequent, alternate);
        break;
      case WHILE:
        jj_consume_token(WHILE);
                  line = token.beginLine;
        test = parExpression();
        body = statement();
          statement = new JWhileStatement(line, test, body);
        break;
      case TRY:
        statement = tryStatement();
        break;
      case THROW:
        jj_consume_token(THROW);
                  line = token.beginLine;
        expr = expression();
        jj_consume_token(SEMI);
          statement = new JThrowStatement(line, expr);
        break;
      case RETURN:
        jj_consume_token(RETURN);
                   line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case INC:
        case LNOT:
        case MINUS:
        case LPAREN:
        case IDENTIFIER:
        case INT_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:
        case DOUBLE_LITERAL:
          expr = expression();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
          statement = new JReturnStatement(line, expr);
        break;
      case SEMI:
        jj_consume_token(SEMI);
          line = token.beginLine;
          statement = new JEmptyStatement( line );
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INC:
      case LNOT:
      case MINUS:
      case LPAREN:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case DOUBLE_LITERAL:
        // Must be a statementExpression
                statement = statementExpression();
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final private JTryStatement tryStatement() throws ParseException {
    int line = 0;
    JBlock tryPart = null;
    ArrayList<Entry<JCatchFormalParameter, JBlock>> catchPart = new ArrayList();
    Entry<JCatchFormalParameter, JBlock> aCatchClause = null;
    JBlock finallyPart = null;
    try {
      jj_consume_token(TRY);
      tryPart = block();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_11;
        }
        aCatchClause = catchClause();
              catchPart.add(aCatchClause);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        finallyPart = block();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JTryStatement(line, tryPart, catchPart, finallyPart);}
    throw new Error("Missing return statement in function");
  }

  final private Entry<JCatchFormalParameter, JBlock> catchClause() throws ParseException {
    int line = 0;
    JCatchFormalParameter formalParameter = null;
    JBlock catchBlock = null;
    try {
      jj_consume_token(CATCH);
                  line = token.beginLine;
      formalParameter = catchFormalParameter();
      catchBlock = block();
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new SimpleEntry(formalParameter, catchBlock);}
    throw new Error("Missing return statement in function");
  }

  final private JCatchFormalParameter catchFormalParameter() throws ParseException {
    int line = 0;
    ArrayList<Type> catchTypes = new ArrayList();
    String name = "";
    Type aType = null;
    try {
      jj_consume_token(LPAREN);
                   line = token.beginLine;
      aType = type();
          catchTypes.add(aType);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOR:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        jj_consume_token(BOR);
        aType = type();
              catchTypes.add(aType);
      }
      jj_consume_token(IDENTIFIER);
                       name = token.image;
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JCatchFormalParameter(line, catchTypes, name);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<JFormalParameter> formalParameters() throws ParseException {
    ArrayList<JFormalParameter> parameters = new ArrayList<JFormalParameter>();
    JFormalParameter aParameter = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case DOUBLE:
      case IDENTIFIER:
        aParameter = formalParameter();
              parameters.add(aParameter);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          aParameter = formalParameter();
                  parameters.add(aParameter);
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return parameters;}
    throw new Error("Missing return statement in function");
  }

  final private JFormalParameter formalParameter() throws ParseException {
    int line    = 0;
    Type type   = null;
    String name = "";
    try {
      type = type();
                        line = token.beginLine;
      jj_consume_token(IDENTIFIER);
                       name = token.image;
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JFormalParameter(line, name, type);}
    throw new Error("Missing return statement in function");
  }

  final private JExpression parExpression() throws ParseException {
    JExpression expr = null;
    try {
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private JVariableDeclaration localVariableDeclarationStatement() throws ParseException {
    int line = 0;
    Type type = null;
    ArrayList<JVariableDeclarator> vdecls = null;
    ArrayList<String> mods = new ArrayList<String>();
    try {
      type = type();
                        line = token.beginLine;
      vdecls = variableDeclarators(type);
      jj_consume_token(SEMI);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JVariableDeclaration(line, mods, vdecls);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<JVariableDeclarator> variableDeclarators(Type type) throws ParseException {
    JVariableDeclarator aVariableDeclarator = null;
    ArrayList<JVariableDeclarator> variableDeclarators =
        new ArrayList<JVariableDeclarator>();
    try {
      aVariableDeclarator = variableDeclarator(type);
          variableDeclarators.add(aVariableDeclarator);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        aVariableDeclarator = variableDeclarator(type);
              variableDeclarators.add(aVariableDeclarator);
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return variableDeclarators;}
    throw new Error("Missing return statement in function");
  }

  final private JVariableDeclarator variableDeclarator(Type type) throws ParseException {
    int line = 0;
    JExpression initial = null;
    String name = "";
    try {
      jj_consume_token(IDENTIFIER);
                       line = token.beginLine; name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        initial = variableInitializer(type);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JVariableDeclarator(line, name, type, initial);}
    throw new Error("Missing return statement in function");
  }

  final private JExpression variableInitializer(Type expected) throws ParseException {
    JExpression initializer = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        initializer = arrayInitializer(expected);
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INC:
      case LNOT:
      case MINUS:
      case LPAREN:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case DOUBLE_LITERAL:
        initializer = expression();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return initializer;}
    throw new Error("Missing return statement in function");
  }

  final private JArrayInitializer arrayInitializer(Type expected) throws ParseException {
    int line = 0;
    ArrayList<JExpression> initials = new ArrayList<JExpression>();
    JExpression anInitializer = null;
    try {
      jj_consume_token(LCURLY);
                   line = token.beginLine;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INC:
      case LNOT:
      case MINUS:
      case LPAREN:
      case LCURLY:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case DOUBLE_LITERAL:
        anInitializer = variableInitializer(expected.componentType());
              initials.add(anInitializer);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          anInitializer = variableInitializer(expected.componentType());
                  initials.add(anInitializer);
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JArrayInitializer(line, expected, initials);}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<JExpression> arguments() throws ParseException {
    ArrayList<JExpression> args = new ArrayList<JExpression>();
    JExpression anExpression = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INC:
      case LNOT:
      case MINUS:
      case LPAREN:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case DOUBLE_LITERAL:
        anExpression = expression();
                                          args.add(anExpression);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          anExpression = expression();
                  args.add(anExpression);
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final private Type type() throws ParseException {
    Type type = null;
    try {
      if (jj_2_10(2147483647)) {
        type = referenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INT:
        case DOUBLE:
          type = basicType();
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
       recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final private Type basicType() throws ParseException {
    Type type = Type.ANY;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                    type = Type.BOOLEAN;
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
                   type = Type.DOUBLE;
        break;
      case CHAR:
        jj_consume_token(CHAR);
                 type = Type.CHAR;
        break;
      case INT:
        jj_consume_token(INT);
                type = Type.INT;
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final private Type referenceType() throws ParseException {
    Type type = Type.ANY;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case DOUBLE:
        type = basicType();
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
                            type = new ArrayTypeName(type);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACK:
            ;
            break;
          default:
            jj_la1[40] = jj_gen;
            break label_17;
          }
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
              type = new ArrayTypeName(type);
        }
        break;
      case IDENTIFIER:
        type = qualifiedIdentifier();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACK:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_18;
          }
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
              type = new ArrayTypeName(type);
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final private JStatement statementExpression() throws ParseException {
    int line = 0;
    JExpression expr = null;
    try {
      expr = expression();
            line = expr.line();
            if (expr instanceof JAssignment
             || expr instanceof JPreIncrementOp
             || expr instanceof JPostDecrementOp
             || expr instanceof JMessageExpression
             || expr instanceof JSuperConstruction
             || expr instanceof JThisConstruction
             || expr instanceof JNewOp
             || expr instanceof JNewArrayOp) {
                // So as not to save on stack
                expr.isStatementExpression = true;
            } else {
                reportParserError("Invalid statement expression; " +
                                  "it does not have a side-effect");
            }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JStatementExpression( line, expr );}
    throw new Error("Missing return statement in function");
  }

  final private JExpression expression() throws ParseException {
    JExpression expr = null;
    try {
      expr = assignmentExpression();
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression assignmentExpression() throws ParseException {
    int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = conditionalAndExpression();
                                           line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case PLUS_ASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          rhs = assignmentExpression();
              lhs = new JAssignOp(line, lhs, rhs);
          break;
        case PLUS_ASSIGN:
          jj_consume_token(PLUS_ASSIGN);
          rhs = assignmentExpression();
              lhs = new JPlusAssignOp(line, lhs, rhs);
          jj_consume_token(SUB_ASSIGN);
          rhs = assignmentExpression();
              lhs = new JMinusAssignOp(line, lhs, rhs);
          jj_consume_token(MULTI_ASSIGN);
          rhs = assignmentExpression();
              lhs = new JStarAssignOp(line, lhs, rhs);
          jj_consume_token(MOD_ASSIGN);
          rhs = assignmentExpression();
              lhs = new JModAssignOp(line, lhs, rhs);
          jj_consume_token(DIV_ASSIGN);
          rhs = assignmentExpression();
              lhs = new JSlashAssignOp(line, lhs, rhs);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression conditionalAndExpression() throws ParseException {
    int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = equalityExpression();
                                     line = lhs.line();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_19;
        }
        jj_consume_token(LAND);
        rhs = equalityExpression();
              lhs = new JLogicalAndOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression equalityExpression() throws ParseException {
    int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = relationalExpression();
                                       line = lhs.line();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_20;
        }
        jj_consume_token(EQUAL);
        rhs = relationalExpression();
              lhs = new JEqualOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression relationalExpression() throws ParseException {
    int line = 0;
    JExpression lhs = null, rhs = null;
    Type type = null;
    try {
      lhs = additiveExpression();
                                     line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
      case GT:
      case LE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          jj_consume_token(GT);
          rhs = additiveExpression();
              lhs = new JGreaterThanOp(line, lhs, rhs);
          break;
        case LE:
          jj_consume_token(LE);
          rhs = additiveExpression();
              lhs = new JLessEqualOp(line, lhs, rhs);
          break;
        case INSTANCEOF:
          jj_consume_token(INSTANCEOF);
          type = referenceType();
              lhs = new JInstanceOfOp(line, lhs, type);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression additiveExpression() throws ParseException {
    int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = multiplicativeExpression();
                                           line = lhs.line();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          rhs = multiplicativeExpression();
              lhs = new JPlusOp(line, lhs, rhs);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          rhs = multiplicativeExpression();
              lhs = new JSubtractOp(line, lhs, rhs);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression multiplicativeExpression() throws ParseException {
    int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = unaryExpression();
                                  line = lhs.line();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case DIV:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIV:
          jj_consume_token(DIV);
          rhs = unaryExpression();
              lhs = new JDivideOp(line, lhs, rhs);
          break;
        case STAR:
          jj_consume_token(STAR);
          rhs = unaryExpression();
              lhs = new JMultiplyOp(line, lhs, rhs);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression unaryExpression() throws ParseException {
    int line = 0;
    JExpression expr = null, unaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
                line = token.beginLine;
        unaryExpr = unaryExpression();
          expr = new JPreIncrementOp(line, unaryExpr);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                  line = token.beginLine;
        unaryExpr = unaryExpression();
          expr = new JNegateOp(line, unaryExpr);
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case LNOT:
      case LPAREN:
      case IDENTIFIER:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case DOUBLE_LITERAL:
        expr = simpleUnaryExpression();
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression simpleUnaryExpression() throws ParseException {
    int line = 0;
    Type type = null;
    JExpression expr = null, unaryExpr = null, simpleUnaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LNOT:
        jj_consume_token(LNOT);
                 line = token.beginLine;
        unaryExpr = unaryExpression();
          expr = new JLogicalNotOp(line, unaryExpr);
        break;
      default:
        jj_la1[54] = jj_gen;
        if (jj_2_11(2147483647)) {
          jj_consume_token(LPAREN);
                   line = token.beginLine;
          type = basicType();
          jj_consume_token(RPAREN);
          unaryExpr = unaryExpression();
          expr = new JCastOp(line, type, unaryExpr);
        } else if (jj_2_12(2147483647)) {
          jj_consume_token(LPAREN);
                   line = token.beginLine;
          type = referenceType();
          jj_consume_token(RPAREN);
          simpleUnaryExpr = simpleUnaryExpression();
          expr = new JCastOp(line, type, simpleUnaryExpr);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FALSE:
          case NEW:
          case NULL:
          case SUPER:
          case THIS:
          case LPAREN:
          case IDENTIFIER:
          case INT_LITERAL:
          case CHAR_LITERAL:
          case STRING_LITERAL:
          case DOUBLE_LITERAL:
            expr = postfixExpression();
            break;
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr ;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression postfixExpression() throws ParseException {
    int line = 0;
    JExpression primaryExpr = null;
    try {
      primaryExpr = primary();
                                  line = primaryExpr.line();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
        case DOT:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_23;
        }
        primaryExpr = selector(primaryExpr);
      }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEC:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_24;
        }
        jj_consume_token(DEC);
              primaryExpr = new JPostDecrementOp(line, primaryExpr);
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return primaryExpr;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression selector(JExpression target) throws ParseException {
    int line = 0;
    ArrayList<JExpression> args = null;
    TypeName id = null;
    JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
                line = token.beginLine;
        id = qualifiedIdentifier();
          expr = new JFieldSelection(line, ambiguousPart(id),
                                     target, id.simpleName());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          args = arguments();
              expr = new JMessageExpression(line, target,
                                            ambiguousPart(id),
                                            id.simpleName(), args);
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        break;
      case LBRACK:
        jj_consume_token(LBRACK);
                   line = token.beginLine;
          expr = new JArrayExpression(line, target, expression());
        jj_consume_token(RBRACK);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression primary() throws ParseException {
    int line = 0;
    JExpression expr = null;
    JExpression newTarget = null;
    ArrayList<JExpression> args = null;
    TypeName id = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr = parExpression();
        break;
      case THIS:
        jj_consume_token(THIS);
                 line = token.beginLine; expr = new JThis(line);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          args = arguments();
              expr = new JThisConstruction(line, args);
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        break;
      case SUPER:
        jj_consume_token(SUPER);
                  line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          args = arguments();
              expr = new JSuperConstruction(line, args);
          break;
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
                newTarget = new JSuper(line);
                expr = new JFieldSelection(line, newTarget,
                                           token.image );
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            args = arguments();
                  expr = new JMessageExpression(line, newTarget,
                                                null, token.image, args);
            break;
          default:
            jj_la1[61] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FALSE:
      case NULL:
      case INT_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case DOUBLE_LITERAL:
        expr = literal();
        break;
      case NEW:
        jj_consume_token(NEW);
        expr = creator();
        break;
      case IDENTIFIER:
        // Language is ambiguous here. JavaCC warns about not being
                // able to choose between qualifiedIdentifier and selector.
                // Semantic analysis will sort it out.
                id = qualifiedIdentifier();
            line = id.line();
            if (ambiguousPart(id) == null) {
                expr = new JVariable(line, id.simpleName());
            } else {
                expr = new JFieldSelection(line, ambiguousPart(id),
                                            null, id.simpleName());
            }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          args = arguments();
              expr = new JMessageExpression(line, null,
                                            ambiguousPart(id),
                                            id.simpleName(), args);
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private JExpression creator() throws ParseException {
    int line = 0;
    Type type = null;
    ArrayList<JExpression> args = null;
    ArrayList<JExpression> dims = null;
    JArrayInitializer init =  null;
    JExpression expr = null;
    Type expected = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case DOUBLE:
        type = basicType();
        break;
      case IDENTIFIER:
        type = qualifiedIdentifier();
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          line = token.beginLine;
          expected = type;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        args = arguments();
              expr = new JNewOp(line, type, args);
        break;
      default:
        jj_la1[67] = jj_gen;
        if (jj_2_14(2147483647)) {
          expr = newArrayDeclarator(type);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACK:
            jj_consume_token(LBRACK);
            jj_consume_token(RBRACK);
                                expected = new ArrayTypeName(expected);
            label_25:
            while (true) {
              if (jj_2_13(2147483647)) {
                ;
              } else {
                break label_25;
              }
              jj_consume_token(LBRACK);
              jj_consume_token(RBRACK);
                  expected = new ArrayTypeName(expected);
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LCURLY:
              expr = arrayInitializer(expected);
              break;
            default:
              jj_la1[66] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
        expr = new JWildExpression(token.beginLine);
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private JNewArrayOp newArrayDeclarator(Type type) throws ParseException {
    int line = 0;
    ArrayList<JExpression> dimensions = new ArrayList<JExpression>();
    JExpression expr = null;
    try {
      jj_consume_token(LBRACK);
                   line = token.beginLine;
      expr = expression();
          dimensions.add(expr);
          type = new ArrayTypeName(type);
      jj_consume_token(RBRACK);
      label_26:
      while (true) {
        if (jj_2_15(2147483647)) {
          ;
        } else {
          break label_26;
        }
        jj_consume_token(LBRACK);
        expr = expression();
              dimensions.add(expr);
              type = new ArrayTypeName(type);
        jj_consume_token(RBRACK);
      }
      label_27:
      while (true) {
        if (jj_2_16(2147483647)) {
          ;
        } else {
          break label_27;
        }
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
                                type = new ArrayTypeName(type);
      }
    } catch (ParseException e) {
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return new JNewArrayOp( line, type, dimensions );}
    throw new Error("Missing return statement in function");
  }

  final private JExpression literal() throws ParseException {
    JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LITERAL:
        jj_consume_token(INT_LITERAL);
          expr = new JLiteralInt(token.beginLine, token.image);
        break;
      case CHAR_LITERAL:
        jj_consume_token(CHAR_LITERAL);
          expr = new JLiteralChar(token.beginLine, token.image);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
          expr =
              new JLiteralString(token.beginLine, token.image);
        break;
      case DOUBLE_LITERAL:
        jj_consume_token(DOUBLE_LITERAL);
          expr = new JLiteralDouble(token.beginLine, token.image);
        jj_consume_token(TRUE);
          expr = new JLiteralTrue(token.beginLine);
        break;
      case FALSE:
        jj_consume_token(FALSE);
          expr = new JLiteralFalse(token.beginLine);
        break;
      case NULL:
        jj_consume_token(NULL);
          expr = new JLiteralNull(token.beginLine);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        expr = new JWildExpression(token.beginLine);
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_3R_86() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(PLUS_ASSIGN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(SUB_ASSIGN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(MULTI_ASSIGN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(MOD_ASSIGN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(DIV_ASSIGN)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_72()) return true;
    return false;
  }

  public JavaCCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[70];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x200000,0x10000,0x5c00900,0x0,0x5c00100,0x5c00100,0x2000,0x0,0x0,0x45c40700,0x0,0x0,0x40040600,0x0,0x0,0x40600,0x0,0x2000,0x45c40f00,0x40040600,0x0,0x40600,0x9a1cc600,0x9a18c000,0x18184000,0x9a18c000,0x0,0x0,0x0,0x0,0x40600,0x0,0x0,0x18184000,0x0,0x18184000,0x0,0x18184000,0x40600,0x40600,0x0,0x0,0x40600,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x18184000,0x0,0x18184000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18184000,0x40600,0x0,0x0,0x0,0x104000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x8000,0x1,0x0,0x100000,0x1,0x100000,0x0,0x1,0x0,0x0,0x401,0x1,0x0,0x1,0x20480001,0x20480000,0x20000000,0x20480000,0x10,0x100,0x0,0x0,0x1,0x0,0x2000000,0x20000000,0x0,0x20000000,0x0,0x20000000,0x1,0x1,0x0,0x0,0x1,0x2000000,0x2000000,0x40000000,0x8000000,0x90000000,0x90000000,0x1000000,0x1000000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x50000003,0x50000003,0x10000003,0x50000003,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x50000003,0x0,0x50000003,0x0,0x10000003,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x2,0x2,0x18,0x18,0x10000003,0x1,0x10000000,0x0,0x0,0x10000000,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x0,0x40000000,0x10000000,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x40,0x8,0x0,0x40,0x0,0x4,0x40,0x8,0x0,0x40,0x40,0x4,0x40,0x5c44,0x5c44,0x5c40,0x5c44,0x0,0x0,0x0,0x8,0x40,0x8,0x0,0x5c40,0x8,0x5c40,0x8,0x5c40,0x0,0x0,0x1,0x1,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5c40,0x0,0x5c40,0x11,0x0,0x0,0x11,0x0,0x0,0x10,0x0,0x5c40,0x40,0x0,0x0,0x1,0x5c00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JavaCCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JavaCCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JavaCCParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JavaCCParser(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[112];
    for (int i = 0; i < 112; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 70; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 112; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
